'number' + 3 + 3 
result: number33 //"number" це String, тому "3" також сприйматиметься як String і відбувається конкатенація. Як результат вся строка відповіді буде такого типу 

null + 3
result: 3 // null має тип Object і означає відсутність значень (тобто 0), тому при додаванні до 3 буде давати 3

5 && "qwerty"
result: qwerty //оператор AND при порівнянні двох істиних значень поверне останнє 

+'40' + +'2' + "hillel";
result: 42hillel //Оператор "+" перед значенням 40 та 2 переводить їх в тип Number, потім сумує їх та конкатенує значення hillel(String)

'10' - 5 === 6;
result: false // '10' це String, а 5 - Number. Оператор "-" переводить обидва значення до Number і проводить математичну операцію з резульатом "5". 
              // === - оператор строгого порівняння, він порівнює тип (однаковий.Number) та значення (5 та 6. не однакове) і повертає false

true + false
result: 1 // Оператор "+" переводить значення true/false в 1/0 та проводить математичне додавання

'4px' - 3
result: NaN //Оператор "-" намагається перевести "4px" в Number, але не може через "px", тому результат - не є номером

'4' - 3
result: 1 //Оператор "-" переводить "4" в Number, і виконує математичне віднімання

'6' + 3 ** 0;
result:61 //Оператор "**" зводить 3 в ступінь 0 = 1, потім оператор "+" переводить значення "1"(Number) в String та виконує конкатенацію з "6"(String), тому що є значення типу String 

12 / '6'
result: 2 //Оператор "/" переводить "6" в Number, і виконує математичне ділення

'10' + (5 === 6);
result: 10false //Спочатку виконується операція строгого порівняння 5 та 6, що дає результат false. Потім "10"(String) конкатенується з false (Boolean) яке прийняло новий тип String

null == ''
result: false // Оператор "==" порівнює значення null та ''(порожній String). Порожній String - не є null

3 ** (9 / 3);
result: 27 // Спочатку виконується дія в дужках 3/9=3. Потім 3 зводиться до ступіню 3 = 27. Всі значення тут Number

!!'false' == !!'true'
result: true //"false" та "true" - істині String значення. При подвійному інвертуванні ці обидва значення переводяться як true>false>true. Значення порівнюються через "==" як true == true та повертають true

0 || '0' && 1
result: 1 //Спочатку через OR протиставляються значення 0 та "0". Результатом є "0" - перше істинне значення. Потім через && співставляються "0" та 1. Обидва істинні, тому повертається останнє - 1

(+null == false) < 1;
result: false //За значенням порівнюються +null (що переходить в Number - 0) та false (що теж через 0 переходить в Number - 0). Резульатом порівняння двок 0 буде true. Потім true порівнюєється до 1, що переворює true на 1. Врешті маємо 1<1, що не є правдою. Результа false

false && true || true
result: true //Зліва направо. Оператор && повертає перше хибне значення, тобто false && true -> false. В нас залишається false || true. Оператор || повертає переше істинне значення, тобто false || true -> true

false && (false || true);
result: false //Спочатку дія в дужках false || true -> повертає перше істине true. Потім false && true -> повертає перше хибне false

(+null == false) < 1 ** 5;
result: false //За значенням порівнюються +null (що переходить в Number - 0) та false (що теж через 0 переходить в Number - 0). Резульатом порівняння двок 0 буде true. 
              // Потім виконується операція зведення 1 в ступінь 5, що дає 1. Ми отримуємо true<1. True порівнюєється до 1, що переворює true на 1. Врешті маємо 1<1, що не є правдою. Результа false
